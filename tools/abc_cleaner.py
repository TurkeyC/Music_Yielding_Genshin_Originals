#!/usr/bin/env python3
"""
简化版ABC音乐后处理工具
修复生成的ABC记谱格式中的常见问题
"""

import re

def clean_abc_notation(abc_text, title="Generated Music"):
    """
    清理和修复ABC记谱格式
    """
    lines = abc_text.split('\n')
    cleaned_lines = []
    has_header = False
    
    # 检查是否有正确的头部信息
    header_pattern = r'^[XTCMLK]:'
    for line in lines:
        if re.match(header_pattern, line.strip()):
            has_header = True
            break
    
    # 如果没有头部信息，添加标准头部
    if not has_header:
        standard_header = f"""X:1
T:{title}
C:Generated by HoyoMusic AI
M:4/4
L:1/8
K:C major"""
        cleaned_lines.extend(standard_header.split('\n'))
    
    # 处理每一行
    for line in lines:
        line = line.strip()
        if not line:
            continue
        
        # 如果是头部信息行，直接添加
        if re.match(header_pattern, line):
            cleaned_lines.append(line)
        else:
            # 清理音乐内容行
            cleaned_line = clean_music_line(line)
            if cleaned_line:
                cleaned_lines.append(cleaned_line)
    
    # 确保音乐以适当的结束符结尾
    result = '\n'.join(cleaned_lines)
    if not result.endswith('|]') and not result.endswith(':|'):
        result += ' |]'
    
    return result

def clean_music_line(line):
    """
    清理单行音乐记谱，移除无效字符
    """
    # 定义有效的ABC记谱字符
    valid_chars = set('CDEFGABcdefgab^_=\'," |[]():123456789/z-><')
    
    # 移除无效字符
    cleaned = ''.join(c for c in line if c in valid_chars or c.isspace())
    
    # 修复常见问题
    cleaned = re.sub(r'\s+', ' ', cleaned)  # 规范化空格
    cleaned = re.sub(r'\|+', '|', cleaned)  # 修复多重小节线
    cleaned = re.sub(r'(\d+)\s+(\d+)', r'\1\2', cleaned)  # 修复数字间的空格
    
    # 移除连续的无效字符组合
    cleaned = re.sub(r'[^A-Ga-gz\|\[\]\d\s\^\_\=\'\,\:\(\)\/\-\>\<]+', '', cleaned)
    
    return cleaned.strip()

def validate_abc_basic(abc_text):
    """
    基本的ABC格式验证
    """
    lines = abc_text.split('\n')
    
    # 检查必需的头部字段
    required_fields = ['X:', 'T:', 'K:']
    found_fields = []
    
    for line in lines:
        for field in required_fields:
            if line.strip().startswith(field):
                found_fields.append(field)
                break
    
    missing_fields = [f for f in required_fields if f not in found_fields]
    
    if missing_fields:
        return False, f"缺少必需字段: {', '.join(missing_fields)}"
    
    return True, "基本验证通过"

def fix_abc_structure(abc_text, title="Generated Music"):
    """
    修复ABC结构问题
    """
    try:
        # 基本清理
        cleaned = clean_abc_notation(abc_text, title)
        
        # 验证
        is_valid, message = validate_abc_basic(cleaned)
        
        if is_valid:
            print("✅ ABC格式验证通过")
        else:
            print(f"⚠️ ABC格式问题: {message}")
        
        return cleaned
        
    except Exception as e:
        print(f"❌ ABC修复失败: {e}")
        # 返回最小可用的ABC
        fallback = f"""X:1
T:{title}
C:Generated by HoyoMusic AI
M:4/4
L:1/8
K:C major
z4|z4|z4|z4|]"""
        return fallback

# 测试函数
if __name__ == "__main__":
    print("🧪 测试ABC清理工具...")
    
    # 测试用的问题ABC
    test_abc = """X:1
T:Test Music
(|08f:8zF2 62/] F E||CFf1-F[|]c^2GfG[2e] |   e2-4_1xe|D c [|(G2:]xGGcfc][34GGGgz =f"""
    
    print("📝 原始ABC:")
    print(test_abc)
    
    cleaned = fix_abc_structure(test_abc, "Test Music")
    
    print("\n🔧 清理后ABC:")
    print(cleaned)
    
    is_valid, message = validate_abc_basic(cleaned)
    print(f"\n📋 验证结果: {'✅' if is_valid else '❌'} {message}")
