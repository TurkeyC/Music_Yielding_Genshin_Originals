import os
import sys
import numpy as np
import pickle
import argparse

# 添加项目根目录到Python路径
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.insert(0, project_root)

from src.core.model import HoyoMusicGenerator
from src.tools.abc_to_midi import ABCToMIDIConverter
from src.tools.abc_cleaner import fix_abc_structure

def save_abc_to_file(abc_text, filename):
    """保存ABC文本到文件"""
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(abc_text)
    print(f"📝 ABC音乐已保存到: {filename}")

def clean_generated_abc(text, title="Generated Music"):
    """清理生成的ABC文本，使用专业的ABC清理器"""
    return fix_abc_structure(text, title)

def main():
    parser = argparse.ArgumentParser(description='生成HoyoMusic风格的ABC记谱和MIDI')
    parser.add_argument('--length', type=int, default=800, help='生成音乐的长度')
    parser.add_argument('--temperature', type=float, default=0.8, help='生成的随机性(0.1-2.0)')
    parser.add_argument('--region', type=str, default='Mondstadt', 
                       choices=['Mondstadt', 'Liyue', 'Inazuma', 'Sumeru', 'Fontaine'],
                       help='原神地区风格')
    parser.add_argument('--output-name', type=str, default='hoyomusic_generated',
                       help='输出文件名（不含扩展名）')
    parser.add_argument('--no-midi', action='store_true', help='不生成MIDI文件')
    parser.add_argument('--tune-index', type=int, default=0, help='转换MIDI时选择的曲子索引')
    
    args = parser.parse_args()
    
    print("🎵 HoyoMusic风格生成器")
    print(f"🌍 生成 {args.region} 风格的音乐...")
    
    # 1. 加载字符映射
    print("📂 加载模型配置...")
    try:
        with open('models/hoyomusic_mappings.pkl', 'rb') as f:
            mappings = pickle.load(f)
        
        char_to_int = mappings['char_to_int']
        int_to_char = mappings['int_to_char']
        vocab_size = mappings['vocab_size']
        seq_length = mappings['seq_length']
        
        print(f"✅ 词汇表大小: {vocab_size}, 序列长度: {seq_length}")
        
    except FileNotFoundError:
        print("❌ 错误: 未找到字符映射文件 models/hoyomusic_mappings.pkl")
        print("请先运行 python train.py --use-hoyomusic 训练模型")
        return
    
    # 2. 加载模型
    print("🤖 加载训练好的模型...")
    try:
        generator = HoyoMusicGenerator(vocab_size, seq_length)
        generator.load_model('models/hoyomusic_generator.pth')
    except FileNotFoundError:
        print("❌ 错误: 未找到模型文件 models/hoyomusic_generator.pth")
        print("请先运行 python train.py --use-hoyomusic 训练模型")
        return
    
    # 3. 生成音乐
    print(f"🎼 生成音乐 (长度: {args.length}, 温度: {args.temperature}, 风格: {args.region})...")
    
    try:
        generated_text = generator.generate_hoyomusic_style(
            region=args.region,
            length=args.length,
            temperature=args.temperature,
            char_to_int=char_to_int,
            int_to_char=int_to_char
        )
    except Exception as e:
        print(f"❌ 生成音乐时出错: {e}")
        # 使用通用生成方法作为备选
        print("🔄 尝试使用通用生成方法...")
        seed = f"X:1\nT:{args.region} Song\nC:Generated by HoyoMusic AI\nM:4/4\nL:1/8\nK:C major\n"
        generated_text = generator.generate_music(
            seed_text=seed,
            char_to_int=char_to_int,
            int_to_char=int_to_char,
            length=args.length,
            temperature=args.temperature
        )
    
    # 4. 清理和保存ABC文件
    print("🔧 后处理ABC格式...")
    cleaned_text = clean_generated_abc(generated_text, f"{args.region} Style Music")
    
    # 确保输出目录存在
    os.makedirs('generated_music', exist_ok=True)
    
    abc_filename = f'generated_music/{args.output_name}.abc'
    save_abc_to_file(cleaned_text, abc_filename)
    
    # 5. 转换为MIDI
    if not args.no_midi:
        print("🎹 转换为MIDI格式...")
        midi_filename = f'generated_music/{args.output_name}.mid'
        
        converter = ABCToMIDIConverter()
        success = converter.convert_abc_to_midi(
            cleaned_text, 
            midi_filename, 
            tune_index=args.tune_index
        )
        
        if success:
            print(f"🎼 MIDI文件已保存到: {midi_filename}")
        else:
            print("⚠️  MIDI转换失败，但ABC文件已生成")
    
    # 6. 显示生成结果
    print("\n" + "="*60)
    print(f"🎵 生成的{args.region}风格ABC音乐:")
    print("="*60)
    
    # 显示前500个字符
    display_text = cleaned_text[:500] + "..." if len(cleaned_text) > 500 else cleaned_text
    print(display_text)
    
    print("="*60)
    
    print(f"\n📁 文件已保存:")
    print(f"  - ABC记谱: {abc_filename}")
    if not args.no_midi:
        print(f"  - MIDI文件: generated_music/{args.output_name}.mid")
    
    print(f"\n🎧 播放建议:")
    print(f"  - 在线播放ABC: https://abcjs.net/abcjs-editor.html")
    print(f"  - MIDI播放器: 任何支持MIDI的音乐软件")
    print(f"  - 导入MuseScore: 进一步编辑和美化")
    
    print(f"\n✨ 提示:")
    print(f"  - 调整 --temperature 参数来改变创意程度")
    print(f"  - 尝试不同的 --region 来体验各地区风格")
    print(f"  - 使用 --length 控制生成的音乐长度")

if __name__ == "__main__":
    main()